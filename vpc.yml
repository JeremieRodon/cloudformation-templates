AWSTemplateFormatVersion: 2010-09-09
Description: VPC stack
Parameters:
  ProjectName:
    Type: String
  Environment:
    Type: String
    Description: The environment to deploy
  Amzn2023AMILatest:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-arm64

Conditions:
  IsMaster: !Equals [ !Ref Environment, "master" ]

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: 10.42.0.0/21
      Tags:
        - Key: Name
          Value: !Sub vpc-${ProjectName}-${Environment}
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select
        - 0
        # The VPC will be devided in 8 subnets
        # This result in the list of the first 4 subnets
        - !Cidr [!Select [0, !Cidr [!GetAtt VPC.CidrBlock, 2, 10]], 4, 8]
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: Network
          Value: Public
        - Key: Name
          Value: !Sub subnet-${ProjectName}-public-A-${Environment}
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select
        - 1
        # The VPC will be devided in 8 subnets
        # This result in the list of the first 4 subnets
        - !Cidr [!Select [0, !Cidr [!GetAtt VPC.CidrBlock, 2, 10]], 4, 8]
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags:
        - Key: Network
          Value: Public
        - Key: Name
          Value: !Sub subnet-${ProjectName}-public-B-${Environment}
  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select
        - 2
        # The VPC will be devided in 8 subnets
        # This result in the list of the first 4 subnets
        - !Cidr [!Select [0, !Cidr [!GetAtt VPC.CidrBlock, 2, 10]], 4, 8]
      AvailabilityZone: !Select [2, !GetAZs ""]
      Tags:
        - Key: Network
          Value: Public
        - Key: Name
          Value: !Sub subnet-${ProjectName}-public-C-${Environment}
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select
        - 0
        # The VPC will be devided in 8 subnets
        # This result in the list of the first 4 subnets
        - !Cidr [!Select [1, !Cidr [!GetAtt VPC.CidrBlock, 2, 10]], 4, 8]
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: Network
          Value: Private
        - Key: Name
          Value: !Sub subnet-${ProjectName}-private-A-${Environment}
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select
        - 1
        # The VPC will be devided in 8 subnets
        # This result in the list of the first 4 subnets
        - !Cidr [!Select [1, !Cidr [!GetAtt VPC.CidrBlock, 2, 10]], 4, 8]
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags:
        - Key: Network
          Value: Private
        - Key: Name
          Value: !Sub subnet-${ProjectName}-private-B-${Environment}
  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select
        - 2
        # The VPC will be devided in 8 subnets
        # This result in the list of the first 4 subnets
        - !Cidr [!Select [1, !Cidr [!GetAtt VPC.CidrBlock, 2, 10]], 4, 8]
      AvailabilityZone: !Select [2, !GetAZs ""]
      Tags:
        - Key: Network
          Value: Private
        - Key: Name
          Value: !Sub subnet-${ProjectName}-private-C-${Environment}

  # NAT instance
  NATInstanceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub scg-${ProjectName}-nat-${Environment}
      GroupDescription: Allow to access from the VPC
      SecurityGroupIngress:
        - CidrIp: !GetAtt VPC.CidrBlock
          IpProtocol: -1
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1
      Tags:
        - Key: Name
          Value: !Sub scg-${ProjectName}-nat-${Environment}
      VpcId: !Ref VPC
  NATInstanceLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        InstanceType: t4g.nano
        ImageId: !Ref Amzn2023AMILatest
        CreditSpecification:
          CpuCredits: standard
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress: true
            Groups:
              - !GetAtt NATInstanceSG.GroupId
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              DeleteOnTermination: true
              VolumeType: gp3
        UserData:
          Fn::Base64:
            !Sub |
              #!/bin/bash
              # Enable NAT on iptables
              dnf install -y iptables-services
              systemctl enable iptables
              systemctl start iptables
              iface=$(ls /sys/class/net/ | grep '^en' |{ read first others ; echo $first; })
              iptables -t nat -A POSTROUTING -o $iface -s ${VPC.CidrBlock} -j MASQUERADE
              iptables -I FORWARD 1 -o $iface -j ACCEPT
              service iptables save
              # Enable IP forward on Kernel
              echo 1 > /proc/sys/net/ipv4/ip_forward
              echo "net.ipv4.ip_forward = 1" > /etc/sysctl.d/90-ipforward.conf
              # Disable SSM & SSH
              dnf erase -y amazon-ssm-agent openssh
  NATInstanceA:
    Type: AWS::EC2::Instance
    Properties:
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref PublicSubnetA
      SourceDestCheck: false
      LaunchTemplate:
        LaunchTemplateId: !Ref NATInstanceLaunchTemplate
        Version: !GetAtt NATInstanceLaunchTemplate.LatestVersionNumber
      Tags:
        - Key: Name
          Value: !Sub ec2-${ProjectName}-nat-A-${Environment}
  PrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub rt-${ProjectName}-private-A-${Environment}
  PrivateRouteA:
    Type: AWS::EC2::Route
    Properties:
       RouteTableId: !Ref PrivateRouteTableA
       DestinationCidrBlock: 0.0.0.0/0
       InstanceId: !Ref NATInstanceA
  PrivateSubnetRouteTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTableA
  NATInstanceB:
    Type: AWS::EC2::Instance
    Properties:
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref PublicSubnetB
      SourceDestCheck: false
      LaunchTemplate:
        LaunchTemplateId: !Ref NATInstanceLaunchTemplate
        Version: !GetAtt NATInstanceLaunchTemplate.LatestVersionNumber
      Tags:
        - Key: Name
          Value: !Sub ec2-${ProjectName}-nat-B-${Environment}
  PrivateRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub rt-${ProjectName}-private-B-${Environment}
  PrivateRouteB:
    Type: AWS::EC2::Route
    Properties:
       RouteTableId: !Ref PrivateRouteTableB
       DestinationCidrBlock: 0.0.0.0/0
       InstanceId: !Ref NATInstanceB
  PrivateSubnetRouteTableAssociationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTableB
  NATInstanceC:
    Type: AWS::EC2::Instance
    Properties:
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref PublicSubnetC
      SourceDestCheck: false
      LaunchTemplate:
        LaunchTemplateId: !Ref NATInstanceLaunchTemplate
        Version: !GetAtt NATInstanceLaunchTemplate.LatestVersionNumber
      Tags:
        - Key: Name
          Value: !Sub ec2-${ProjectName}-nat-C-${Environment}
  PrivateRouteTableC:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub rt-${ProjectName}-private-C-${Environment}
  PrivateRouteC:
    Type: AWS::EC2::Route
    Properties:
       RouteTableId: !Ref PrivateRouteTableC
       DestinationCidrBlock: 0.0.0.0/0
       InstanceId: !Ref NATInstanceC
  PrivateSubnetRouteTableAssociationC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetC
      RouteTableId: !Ref PrivateRouteTableC
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub rt-${ProjectName}-public-${Environment}
  PublicSubnetRouteTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetRouteTableAssociationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetRouteTableAssociationC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetC
      RouteTableId: !Ref PublicRouteTable

  # Internet gateway and pub routes
  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub igw-${ProjectName}-${Environment}
  IGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref IGW
      VpcId: !Ref VPC
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: IGWAttachment
    Properties:
       RouteTableId: !Ref PublicRouteTable
       DestinationCidrBlock: 0.0.0.0/0
       GatewayId: !Ref IGW

  # Gateway VPC endpoints
  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      RouteTableIds:
        - !Ref PublicRouteTable
        - !Ref PrivateRouteTableA
        - !Ref PrivateRouteTableB
        - !Ref PrivateRouteTableC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcId: !Ref VPC
  DynamoDBEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      RouteTableIds:
        - !Ref PublicRouteTable
        - !Ref PrivateRouteTableA
        - !Ref PrivateRouteTableB
        - !Ref PrivateRouteTableC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.dynamodb
      VpcId: !Ref VPC

Outputs:
  # VPC outputs
  VPCID:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub ${ProjectName}:${Environment}:VPCID
  VPCCIDR:
    Description: VPC CIDR
    Value: !GetAtt VPC.CidrBlock
    Export:
      Name: !Sub ${ProjectName}:${Environment}:VPCCIDR

  # Subnet IDs outputs
  PublicSubnetAID:
    Description: Public subnet A ID
    Value: !Ref PublicSubnetA
    Export:
      Name: !Sub ${ProjectName}:${Environment}:PublicSubnetAID
  PublicSubnetBID:
    Description: Public subnet B ID
    Value: !Ref PublicSubnetB
    Export:
      Name: !Sub ${ProjectName}:${Environment}:PublicSubnetBID
  PublicSubnetCID:
    Description: Public subnet C ID
    Value: !Ref PublicSubnetC
    Export:
      Name: !Sub ${ProjectName}:${Environment}:PublicSubnetCID
  PrivateSubnetAID:
    Description: Private subnet A ID
    Value: !Ref PrivateSubnetA
    Export:
      Name: !Sub ${ProjectName}:${Environment}:PrivateSubnetAID
  PrivateSubnetBID:
    Description: Private subnet B ID
    Value: !Ref PrivateSubnetB
    Export:
      Name: !Sub ${ProjectName}:${Environment}:PrivateSubnetBID
  PrivateSubnetCID:
    Description: Private subnet C ID
    Value: !Ref PrivateSubnetC
    Export:
      Name: !Sub ${ProjectName}:${Environment}:PrivateSubnetCID
